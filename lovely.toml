[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
position = "before"
pattern = 'self:set_ability(center, true)'
match_indent = false
payload = '''
	if self.params.infinifusion then self.infinifusion = self.params.infinifusion end
	if self.params.infus_api then
		self.infinifusion_api = self.params.infus_api
		self.infinifusion_api_checked = true
		self.params.infus_api = nil
	end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
position = "after"
pattern = 'self:set_ability(center, true)'
match_indent = false
payload = '''
	if self.params.infus_old_ability then
		self.ability = copy_table(self.params.infus_old_ability)
		self.params.infus_old_ability = nil
	end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
position = "before"
pattern = 'if not G.OVERLAY_MENU then'
match_indent = false
payload = '''
	if self.infinifusion and not G.OVERLAY_MENU then
		for k,v in ipairs(self.infinifusion) do
			if self.REMOVED then
				if not next(SMODS.find_card(v.key, true)) then
					G.GAME.used_jokers[v.key] = nil
				end
			else
				G.GAME.used_jokers[v.key] = true
			end
		end
	end'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
position = "before"
pattern = 'new_card:set_ability(other.config.center)'
match_indent = false
payload = '''if other.infinifusion then new_card.infinifusion = copy_table(other.infinifusion) end
if other.infinifusion_api_checked then 
	new_card.infinifusion_api_checked = other.infinifusion_api_checked
	new_card.infinifusion_api = other.infinifusion_api
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
position = "before"
pattern = "(self.ability.set == 'Joker' and {G.C.RARITY[self.config.center.rarity]}) or"
match_indent = false
payload = "self.infinifusion and {InfiniteFusion.badge_colour} or"

